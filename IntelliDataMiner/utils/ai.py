"""
Utility functions for AI integration (OpenAI)
"""
import os
import json
import logging
import pandas as pd
import numpy as np
import plotly.express as px
from openai import OpenAI

logger = logging.getLogger(__name__)

# Initialize OpenAI client
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)

def generate_insights(dataset_summary):
    """
    Generate insights about the dataset using OpenAI GPT
    
    Args:
        dataset_summary (str): Summary of the dataset
        
    Returns:
        dict: Insights generated by OpenAI
    """
    try:
        # Check if API key is available
        if not OPENAI_API_KEY:
            raise ValueError("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.")
        
        prompt = f"""
        You are a data science expert analyzing a dataset. Based on the dataset summary below, please provide:
        
        # Key Observations
        (Key statistical observations, data quality issues, interesting distributions, etc.)
        
        # Patterns & Trends
        (Correlations, temporal patterns, outliers, and other notable relationships)
        
        # Recommended Analyses
        (Specific statistical tests, feature engineering approaches, or preprocessing techniques)
        
        # Suggested Models
        (Machine learning models that would work well with this data and why)
        
        # Visualization Ideas
        (Specific visualization types that would reveal insights in this dataset)
        
        Dataset summary:
        {dataset_summary}
        
        Use markdown formatting:
        - Use # for section headings
        - Use bullet points (- or *) or numbered lists (1.) for lists
        - Highlight important terms with **bold text**
        - Don't use indentation for bullets
        - Keep paragraphs short and focused
        - Organize information into clear sections
        """
        
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.7
        )
        
        insights = response.choices[0].message.content
        
        return {
            "insights": insights
        }
        
    except Exception as e:
        logger.error(f"Error generating AI insights: {str(e)}")
        # Return a more user-friendly error
        if "Rate limit" in str(e):
            return {"error": "OpenAI API rate limit exceeded. Please try again later."}
        elif "API key" in str(e):
            return {"error": "Invalid OpenAI API key. Please check your API key configuration."}
        else:
            return {"error": f"Error generating AI insights: {str(e)}"}

def natural_language_query(user_query, df):
    """
    Execute a natural language query on the dataset
    
    Args:
        user_query (str): Natural language query like "show me sales trends by region"
        df (pd.DataFrame): The dataset to query
        
    Returns:
        dict: Results including explanation, code, and visualization if applicable
    """
    try:
        # Check if API key is available
        if not OPENAI_API_KEY:
            raise ValueError("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.")
            
        # Create a detailed description of the dataframe
        df_info = {}
        df_info['shape'] = df.shape
        df_info['columns'] = df.columns.tolist()
        df_info['dtypes'] = {col: str(df[col].dtype) for col in df.columns}
        df_info['sample'] = df.head(5).to_dict('records')
        df_info['describe'] = df.describe().to_dict()
        
        # Convert to a formatted string
        dataset_description = f"""
        DataFrame Information:
        - Shape: {df_info['shape'][0]} rows, {df_info['shape'][1]} columns
        - Columns: {', '.join(df_info['columns'])}
        - Data Types: {json.dumps(df_info['dtypes'], indent=2)}
        - Sample Data: {json.dumps(df_info['sample'], indent=2)}
        - Statistics: {json.dumps(df_info['describe'], indent=2)}
        """
        
        system_prompt = f"""
        You are a data analysis assistant that helps users analyze data through natural language queries.
        You will be given a DataFrame description and a user's query.
        
        Your task is to:
        1. Generate Python code that answers the user's query using pandas, numpy, and plotly
        2. Explain what the code does step by step
        3. Provide insights about the results
        
        DataFrame description:
        {dataset_description}
        
        Respond with a JSON object in this format:
        {{
            "explanation": "Clear explanation of how you'll answer the query",
            "code": "The Python code to execute",
            "insights": "Insights about what the results show",
            "visualization_type": "Type of visualization (if applicable)" 
        }}
        
        Keep your code simple and efficient. If a query can't be answered with the available data, explain why.
        """
        
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            response_format={"type": "json_object"},
            max_tokens=2000,
            temperature=0.3
        )
        
        result = json.loads(response.choices[0].message.content)
        
        # Execute the code if available
        if 'code' in result and result['code']:
            try:
                # Create a local namespace with the dataframe
                local_vars = {'df': df, 'pd': pd, 'np': np, 'px': px}
                
                # Add plotting imports
                exec('import plotly.express as px', local_vars)
                exec('import plotly.graph_objects as go', local_vars)
                exec('from plotly.subplots import make_subplots', local_vars)
                
                # Execute the code
                exec(result['code'], local_vars)
                
                # Check if a figure was created
                if 'fig' in local_vars:
                    # Convert to HTML
                    result['visualization'] = local_vars['fig'].to_html(full_html=False, include_plotlyjs='cdn')
            except Exception as e:
                result['execution_error'] = str(e)
        
        return result
        
    except Exception as e:
        logger.error(f"Error executing natural language query: {str(e)}")
        if "Rate limit" in str(e):
            return {"error": "OpenAI API rate limit exceeded. Please try again later."}
        elif "API key" in str(e):
            return {"error": "Invalid OpenAI API key. Please check your API key configuration."}
        else:
            return {"error": f"Error processing natural language query: {str(e)}"}

def chat_with_data(user_message, dataset_summary):
    """
    Chat with OpenAI about the dataset
    
    Args:
        user_message (str): User's question or request
        dataset_summary (str): Summary of the dataset
        
    Returns:
        str: Response from OpenAI
    """
    try:
        # Check if API key is available
        if not OPENAI_API_KEY:
            raise ValueError("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.")
        
        system_prompt = f"""
        You are a helpful data science assistant. You have access to the following dataset summary:
        
        {dataset_summary}
        
        Answer the user's questions about the data. If asked to generate code, provide Python code using libraries like pandas, scikit-learn, matplotlib, or plotly.
        
        Format your responses attractively:
        - Use # for section headings when organizing complex answers
        - Use bullet points (- or *) or numbered lists (1.) for multiple items
        - Highlight important terms with **bold text** (use sparingly, not for entire sentences)
        - Use code blocks with proper syntax highlighting (```python) for code
        - Keep explanations concise and direct
        - When explaining technical concepts, use structured explanations
        
        If you're unsure or the question cannot be answered with the available data, say so clearly.
        """
        
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Error in chat: {str(e)}")
        # Return a more user-friendly error
        if "Rate limit" in str(e):
            return "OpenAI API rate limit exceeded. Please try again later."
        elif "API key" in str(e):
            return "Invalid OpenAI API key. Please check your API key configuration."
        else:
            return f"Error processing your request: {str(e)}"
